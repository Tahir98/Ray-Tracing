#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float2 _PixelOffset;
int _RayTracingCount;

float4 _DirectionalLight;

struct Ray {
    float3 origin;
    float3 direction;
	float3 energy;
};

struct RayHit {
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

struct Sphere {
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
	float3 velocity;
};

StructuredBuffer<Sphere> _Spheres;

RayHit CreateRayHit() {
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0, 0, 0);
	hit.specular = float3(0, 0, 0);
    
	return hit;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	
    return ray;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
	float t = -ray.origin.y / ray.direction.y;
    
	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0, 1, 0);
		bestHit.albedo = 0.8f;
		bestHit.specular = 0.03f;
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere){
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	
	if (p2sqr < 0)
		return;
	
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
	}
}

RayHit Trace(Ray ray){
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit);
	
	uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres,stride);
	
	for (uint i = 0; i < numSpheres; i++) {
		IntersectSphere(ray,bestHit,_Spheres[i]);
	}
	
	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {
	
	if (hit.distance < 1.#INF) {	
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;
		
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001, -1.0f * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		
		if (shadowHit.distance != 1.#INF) {
			return float3(0, 0, 0);
		}
		
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1.0f) * _DirectionalLight.w * hit.albedo;
	}
	else {
		ray.energy = 0.0f;
		
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi,theta),0).xyz;
	}		
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;

    direction = normalize(direction);

    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	Ray ray = CreateCameraRay(uv);
	
	float3 result = float3(0, 0, 0);
	for (int i = 0; i < _RayTracingCount; i++) {
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);

		if (!any(ray.energy))
			break;
	}
		
	Result[id.xy] = float4(result, 1);
}
